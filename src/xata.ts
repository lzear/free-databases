// Generated by Xata Codegen 0.23.5. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "todos",
    columns: [
      { name: "name", type: "string", notNull: true, defaultValue: "''" },
      {
        name: "createdAt",
        type: "datetime",
        notNull: true,
        defaultValue: "now",
      },
      {
        name: "updatedAt",
        type: "datetime",
        notNull: true,
        defaultValue: "now",
      },
      { name: "done", type: "bool", notNull: true, defaultValue: "false" },
    ],
  },
  { name: "test", columns: [] },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Todos = InferredTypes["todos"];
export type TodosRecord = Todos & XataRecord;

export type Test = InferredTypes["test"];
export type TestRecord = Test & XataRecord;

export type DatabaseSchema = {
  todos: TodosRecord;
  test: TestRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Antoine-Clausse-s-workspace-u1lfeq.eu-west-1.xata.sh/db/todos",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
